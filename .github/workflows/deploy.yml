name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        options:
          - staging
          - production
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure image tags
        run: |
          echo "API_IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.sha }}" >> $GITHUB_ENV
          echo "WEB_IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.sha }}" >> $GITHUB_ENV
          echo "RECIPE_IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-recipe:${{ github.sha }}" >> $GITHUB_ENV
      - name: Pull release images
        run: |
          docker pull $API_IMAGE
          docker pull $WEB_IMAGE
          docker pull $RECIPE_IMAGE
      - name: Write environment file
        run: |
          cat <<'ENV' > .env.production
          NODE_ENV=production
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
          RATE_LIMIT_MAX=${{ secrets.RATE_LIMIT_MAX }}
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          SEED_ON_BOOT=false
          API_PORT=4000
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=3600
          REFRESH_EXPIRES_IN=604800
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          RECIPE_SERVICE_URL=http://recipe:5000
          RECIPE_SERVICE_JWT_SECRET=${{ secrets.RECIPE_JWT_SECRET }}
          RECIPE_SERVICE_JWT_AUDIENCE=recipe-engine
          RECIPE_SERVICE_JWT_ISSUER=custom-cocktails-api
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          EMAIL_SERVER=${{ secrets.EMAIL_SERVER }}
          SENTRY_API_DSN=${{ secrets.SENTRY_API_DSN }}
          SENTRY_WEB_DSN=${{ secrets.SENTRY_WEB_DSN }}
          SENTRY_RECIPE_DSN=${{ secrets.SENTRY_RECIPE_DSN }}
          RECIPE_PORT=5000
          RECIPE_JWT_SECRET=${{ secrets.RECIPE_JWT_SECRET }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          ENV
      - name: Deploy stack
        run: |
          docker compose -f infra/compose.prod.yml up -d --remove-orphans
      - name: Run Prisma migrations
        run: |
          docker compose -f infra/compose.prod.yml exec -T api npx prisma migrate deploy
      - name: Show service status
        run: |
          docker compose -f infra/compose.prod.yml ps
