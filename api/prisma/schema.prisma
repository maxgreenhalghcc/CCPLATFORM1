datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  admin
  staff
  customer
}

enum OrderStatus {
  created
  paid
  fulfilled
  cancelled
}

enum QuizSessionStatus {
  in_progress
  submitted
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          UserRole @default(customer)
  barId         String?
  createdAt     DateTime @default(now())

  bar      Bar?      @relation(fields: [barId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.LongText
  access_token      String?  @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.LongText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bar {
  id       String   @id @default(cuid())
  name     String
  slug     String   @unique
  location String?
  active   Boolean  @default(true)

  settings   BarSettings?
  users      User[]
  whitelist  BarIngredientWhitelist[]
  sessions   QuizSession[]
  recipes    Recipe[]
  orders     Order[]
}

model BarSettings {
  barId         String  @id
  theme         Json
  introText     String?
  outroText     String?
  pricingPounds Decimal @default(12.0) @db.Decimal(10, 2)

  bar Bar @relation(fields: [barId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ingredient {
  id            String                  @id @default(cuid())
  name          String                  @unique
  allergenFlags Json
  active        Boolean                 @default(true)

  bars BarIngredientWhitelist[]
}

model BarIngredientWhitelist {
  barId        String
  ingredientId String

  bar        Bar        @relation(fields: [barId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([barId, ingredientId])
}

model QuizSession {
  id           String            @id @default(cuid())
  barId        String
  status       QuizSessionStatus @default(in_progress)
  answerRecord Json?
  createdAt    DateTime          @default(now())

  bar     Bar          @relation(fields: [barId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answers QuizAnswer[]
  orders  Order[]
  recipes Recipe[]
}

model QuizAnswer {
  id         String      @id @default(cuid())
  sessionId  String
  questionId String
  value      Json

  session QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([sessionId])
  @@unique([sessionId, questionId])
}

model Recipe {
  id          String     @id @default(cuid())
  barId       String
  sessionId   String
  name        String
  description String
  body        Json
  abvEstimate Float?

  bar     Bar         @relation(fields: [barId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  session QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders  Order[]
}

model Order {
  id              String        @id @default(cuid())
  barId           String
  sessionId       String
  recipeId        String?
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("gbp")
  status          OrderStatus   @default(created)
  stripeSessionId String?
  createdAt       DateTime      @default(now())
  fulfilledAt     DateTime?

  bar     Bar         @relation(fields: [barId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  session QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipe  Recipe?     @relation(fields: [recipeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  payments Payment[]

  @@index([barId, status])
  @@unique([stripeSessionId])
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String
  provider  String   @default("stripe")
  intentId  String?
  amount    Decimal  @db.Decimal(10, 2)
  status    String
  raw       Json
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([intentId])
}
